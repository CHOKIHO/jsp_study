
[JSP Study]

1. 톰캣 포트 설정 
    1. 톰캣 (conf/server.xml) connector port 9090변경 

2. 이클립스(EE) 환경설정
    1. 인코딩 (workspace, css, html, jsp files) ISO 10646/Unicode(UTF-8)
	2. 서버지정 (preferences-server-runtime Environment-add : Apache Tomcat v8.0 설정)
	3. dynamic web project 
	
3. javax.servlet
   Servlet < (abstract) GenericServlet < HttpServlet

   org.springframework
   Servlet < HttpServletBean < FrameworkServlet < DispatcherServlet

4. URL과 Servlet 매핑하기
	HelloServlet 작성이 완료 되었다면, 배포서술자(DD=web.xml) 파일에 URL 매핑을 기술한다.   

	<servlet>
	   <servlet-name>hello</servlet-name>  <!-- DD 안에서 사용될 이름을 지정한다. -->
	   <servlet-class>com.oracleclub.study.servlet.HelloServlet</servlet-class>  <!-- Servlet 클래스 이름을 기술한다. -->
	</servlet>

	<servlet-mapping>
	   <servlet-name>hello</servlet-name>        <!-- Servlet 클래스의 DD안에서 정의한 이름 -->
	   <url-pattern>/servlet/hello</url-pattern>  <!-- 클라이언트가 요청하게 될 이름. -->
	</servlet-mapping>
	
	또는 @어노테이션으로 처리
	
	@WebServlet("/MyServlet1") 
	public class MyServlet1 extends HttpServlet {

	}
	
5. filter, listener, servlet
    @WebServlet("/t2") 	
   
6. 서블릿에서 페이지 이동방법 두 가지

	1) forward
		RequestDispatcher rd = request.getRequestDispatcher("이동할 페이지");
		rd.forward(request, response);

		요렇게 하면 페이지 주소는 바뀌지 않고 내용만 바뀐다. 
		페이지가 바뀌어도 reqeust는 바뀌지 않으므로 request에 attribute를 설정해서 
		이동할 페이지로 값을 가져갈 수 있다. 

	2) redirect
		response.sendRedirect("이동할 페이지");
		페이지 주소도 바뀌고 request도 바뀌게 되므로 reqeust의 attribute는 사용할 수 없다.

7.  DAO (mybatis) 연결 - 싱글턴패턴
    1)mybatis, 오라클 라이브러리 추가 
	    C:\mybatis_study\util\mybatis-3.4.2\mybatis-3.4.2
		C:\oraclexe\app\oracle\product\10.2.0\server\jdbc\lib
	  WEB-INF/lib 복사 (Libraries-Web App Libraries에 자동 추가됨)
	   
		①SqlSessionFactory
		②SqlSession
		③ss.insert()
		④ss.close()

8. HttpSession 처리

9. jsp
	1)내부적으로는 서블릿을 변경됨 (변환 java 소스 확인하기)
	C:\jsp_study\work\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\0202\org\apache\jsp\pm
	
	2)스크립트요소
		①선언부(전역)        <%! %>
		②스크립트릿(지역)    <%  %>
		③출력(표현식)        <%= %>
		
		<%@ 지시자

10. 파일업로드 라이브러리 (com.oreilly.servlet)
	1) http://www.servlets.com/cos/
	2) cos-26Dec2008.zip
	3) 파일첨부 form 
	   ①encType="multipart/form-data" 정의
	4) jsp   
	   ①MultipartRequest객체를 사용
	   ②파일저장위치가 필요함 (HttpSession 우회) 

11. 파일 다운로드 
	1)스트림선언
		BufferedInputStream bis = null; (file I/O) 
		InputStream fis = null;
		
		BufferedOutputStream bos = null;
		ServletOutputStream fos = null; (response객체를 통한 스트림 응답)

12. JSP 액션요소 (액션태그지원)
	원래 html태그에는 없는 기능으로써 자바문법을 대신하는 jsp가 제공하는 태그들
	
	JSP 액션 요소는 요청 처리 단계에서 역할을 한다. 
	JSP 액션 요소는 XML 구문을 사용하여 작성됩니다.
	자바빈도 JSP 페이지에서 사용할 수 있는 기능을 제공하고, 
	웹 브라우저에서 자바 애플릿을 실행시킬 수 있는 기능도 지원한다.

	1) include page vs include file
		<jsp:include page="ex1.jsp"/> : 각각 컴파일하여 결과만 merge, 메서드 공유불가
		<jsp:param> 함께 사용
		<%@include file="ex1.jsp"%> : 함께 컴파일, 메서드 공유 가능
		(참고)http://devyongsik.tistory.com/92
	
	2) <jsp:forward>
		<jsp:forward page="ex3_forward2.jsp"></jsp:forward>
		request와 response를 포함하여 다음페이지로 전달
		<jsp:param>태그와 함께 사용
		(참고) sendRedirect는 이전 request와 response를 버리고 새로 생성함.	
		
	3) <jsp:useBean>
		자바문법 new를 대신하는 액션태그 useBean이다.
		<jsp:useBean> new 연산자를 대신함
		<jsp:setProperty> setter를 대신함
		<jsp:getProperty> getter를 대신함

		<jsp:useBean id="userInfo" class="com.mycompany.UserInfoBean" scope="page">
			<jsp:setProperty name="userInfo" property="firstName" />
		</jsp:useBean

		//모든 멤버변수 받을때	
		<jsp:useBean id="vo" class="ex5.MemVO" scope="page">
			<jsp:setProperty name="vo" property="*" />
		</jsp:useBean>	

		<%
			userInfo = new com.mycompany.UserInfoBean();
		%>
		
		<jsp:getProperty name="userInfo" property="firstName" />
	
13. JSP 모델
	1) 모델1 : 스크립트 요소와 액션요소를 활용
		jsp페이지내에 (control 요소와 model 요소가 혼합)	
			
	2) 모델2 : MVC 패턴 (모델1을 제한)
		JSP(View)  -  요청(서블릿, Controller) - 객체(Bean, Model)
	
